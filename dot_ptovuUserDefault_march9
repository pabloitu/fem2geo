// This file was automatically generated by ptovtu
// You can modify it to suit your needs

clear

///////////////////////////////////////////////////////////////////////////
//        Catalog of common physical quantities and their units          //
///////////////////////////////////////////////////////////////////////////

// To define a physical quantity, use an object whose name is that of this
// quantity and which has the following four members:
//  .units: a list of possible units for this quantity
//  .conversionTable: conversion factors or terms to convert each referenced 
//                    unit to the 1st (caution: make sure that conversionTable
//                    is real (use the decimal point if necessary))
//  .conversionOperator: "*" or "+"
//  .choosenUnit: the unit to use when writing the vtu files

// Define some variables:
nano=1e-9; micro=1e-6; milli=1e-3; centi=1e-2; deci=1e-1; unit=1e+0;
deca=1e+1; hecto=1e+2; kilo =1e+3; myria=1e+4; mega=1e+6; giga=1e+9;

minut=60; hour=3600; day=24*hour; year=365*day; Myear=mega*year;

 //
 //- For angle:
 //
 angle.units              = ["rad", "deg"];
 angle.conversionTable    = [ unit, %pi/180];
 angle.conversionOperator = "*";

 angle.choosenUnit = "deg";

//
//- For coordinates:
//
coordinate.units              = ["m"  , "mm"  , "cm"  , "km" ];
coordinate.conversionTable    = [ unit,  milli,  centi,  kilo];
coordinate.conversionOperator = "*";

coordinate.choosenUnit = "m";

//
//- For displacements:
//
displacement.units              = ["m"  , "mm"  , "cm"  , "km" ];
displacement.conversionTable    = [ unit,  milli,  centi,  kilo];
displacement.conversionOperator = "*";

displacement.choosenUnit = "m";

//
//- For energy:
//
energy.units              = ["J"  , "kJ" , "MJ" ];
energy.conversionTable    = [ unit,  kilo,  mega];
energy.conversionOperator = "*";

energy.choosenUnit = "J";

//
//- For force:
//
force.units              = ["N"  , "kN" ];
force.conversionTable    = [ unit,  kilo];
force.conversionOperator = "*";

force.choosenUnit = "N";

//
//- For mass density:
//
mass_density.units              = ["kg/m3", "g/cm3"];
mass_density.conversionTable    = [ unit  ,  milli ];
mass_density.conversionOperator = "*";

mass_density.choosenUnit = "kg/m3";

//
//- For power:
//
power.units              = ["W"  , "mW"  , "kW" , "MW" , "GW" ];
power.conversionTable    = [ unit, milli,  kilo,  mega,  giga ];
power.conversionOperator = "*";

power.choosenUnit = "W";

//
//- For pressure:
//
pressure.units              = ["Pa" , "kPa", "bar", "MPa", "kbar", "GPa"];
pressure.conversionTable    = [ unit,  kilo,  1e5 ,  mega,  1e8  ,  giga];
pressure.conversionOperator = "*";

pressure.choosenUnit = "MPa";

//
//- For strain:
//
strain.units              = ["-"  , "%"   ];
strain.conversionTable    = [ unit,  hecto];
strain.conversionOperator = "*";

strain.choosenUnit = "-";

//
//- For strain rate:
//
strain_rate.units              = ["1/s", "1/min" , "1/h"  , "1/a"  , "1/Ma" ];
strain_rate.conversionTable    = [ unit,  1/minut,  1/hour,  1/year, 1/Myear];
strain_rate.conversionOperator = "*";

strain_rate.choosenUnit = "1/s";

//
//- For stress:
//
stress.units              = ["Pa" , "kPa", "bar", "MPa", "kbar", "GPa"];
stress.conversionTable    = [ unit,  kilo,  1e5 ,  mega,  1e8  ,  giga];
stress.conversionOperator = "*";

stress.choosenUnit = "MPa";

//
//- For Fluid pressure:
//
fluid_pressure.units              = ["Pa" , "kPa", "bar", "MPa", "kbar", "GPa"];
fluid_pressure.conversionTable    = [ unit,  kilo,  1e5 ,  mega,  1e8  ,  giga];
fluid_pressure.conversionOperator = "*";

fluid_pressure.choosenUnit = "Pa";

//
//- For temperature:
//
temperature.units              = ["K" , "C"     ];
temperature.conversionTable    = [ 0.0,  273.15 ];
temperature.conversionOperator = "+";

temperature.choosenUnit = "C";

//
//- For thermal flux:
//
thermal_flux.units              = ["W/m2", "mW/m2"];
thermal_flux.conversionTable    = [ unit ,  milli ];
thermal_flux.conversionOperator = "*";

thermal_flux.choosenUnit = "mW/m2";

//
//- For time:
//
time.units              = ["s"  ,"min" , "h"  , "day", "y", "My"  ];
time.conversionTable    = [ unit, minut,  hour,  day , year, Myear];
time.conversionOperator = "*";

time.choosenUnit = "My";

//
//- For velocities:
//
velocity.units              = ["m/s", "km/h"    , "cm/y"     , "mm/y"     ];
velocity.conversionTable    = [ unit,  kilo/hour,  centi/year,  milli/year];
velocity.conversionOperator = "*";

velocity.choosenUnit = "m/s";

//
//- For Darcy velocities:
//
darcy_vel.units              = ["m/s", "km/h"    , "cm/y"     , "mm/y"     ];
darcy_vel.conversionTable    = [ unit,  kilo/hour,  centi/year,  milli/year];
darcy_vel.conversionOperator = "*";

darcy_vel.choosenUnit = "m/s";

 //
 //- For viscosity:
 //
 viscosity.units              = ["Pa.s"];
 viscosity.conversionTable    = [ unit];
 viscosity.conversionOperator = "*";

 viscosity.choosenUnit = "Pa.s";

//
//- For stress minus lithostatic:
//
//press_minus_lith.units              = ["Pa" , "kPa", "bar", "MPa", "kbar", "GPa"];
//press_minus_lith.conversionTable    = [ unit,  kilo,  1e5 ,  mega,  1e8  ,  giga];
//press_minus_lith.conversionOperator = "*";
//
//press_minus_lith.choosenUnit = "MPa";
//
//
//- For principal stress 1:
//
//stress_princ1.units              = ["Pa" , "kPa", "bar", "MPa", "kbar", "GPa"];
//stress_princ1.conversionTable    = [ unit,  kilo,  1e5 ,  mega,  1e8  ,  giga];
//stress_princ1.conversionOperator = "*";
//
//stress_princ1.choosenUnit = "MPa";
//
///////////////////////////////////////////////////////////////////////////
//                Choice of invariants to be computed                    //
///////////////////////////////////////////////////////////////////////////

// Specify
// - the type of invariant you want to compute (see (a)),
// - the name of the variable (see (b)) to which you want to apply it,
// - the output name of the result (the one that will appear in the vtu files).
// To do this, use a 3-column string array named "invariants" (see (c) for the
// syntax) as in the following example (you can add lines or remove any line):

//            invariant type ,  variable name,  ouput name
 invariants = [ ...
                "isoPart"    , "stresses"    , "Mean_stress"     ; ...
                "equivStress", "stresses"    , "Eqv(stress)"     ; ...
                "equivStrain", "strains"     , "Eqv(strain)"     ; ...
                "equivStrain", "strain_rates", "Eqv(strainRate)" ; ...
                "volPart"    , "strains"     , "Vol_strain"      ; ...
                "volPart"    , "strain_rates", "Vol_strainRate"    ...
              ] ;

// Notes:
// (a): predefined invariants are
//      - equivStress = Von Mises equivalent stress = sqrt{3J2(x)}   = sqrt{(3xd:xd/2}
//      - equivStrain = Von Mises equivalent strain = sqrt{4J2(x)/3} = sqrt{2xd:xd/3}
//      - isoPart = trace(x)/3
//      - volPart = trace(x)
//      - sqrtI2 = sqrt(I2(x))
//      - sqrtJ2 = sqrt(J2(x))
//      where  I2(x) = x:x/2,  J2(x) = xd:xd/2,   xd = dev(x),   trace(x) = x : I

// (b): if this variable is not found in your fem output file or if this variable
//      does not correspond to a symmetric second ordre tensor (6 components) the
//      corresponding invariant calculation will simply be ignored.

// (c): use comma (,) for column delimiter and semicolon (;) for line delimiter.


///////////////////////////////////////////////////////////////////////////
//        Choice of eigenvalues and eigenvectors to be computed          //
///////////////////////////////////////////////////////////////////////////

// Specify
// - if you want to calculate the eigen-elements of the whole tensor or of
//   its deviatoric part (see (a)),
// - the name of the corresponding variable (see (b)),
// - the output name of the result (the one that will appear in the vtu files).
// To do this, use a 3-column string array named "eigenvalues" (see (c) for the
// syntax) as in the following example:

 eigenvalues = [ "whole"    , "stresses" , "Stress" ; ...
                 "deviator" , "stresses" , "DevStress"   ...
                 ] ; 
// eigenvalues = [ ...
//                 "whole"    , "stresses" , "Stress"    ; ...
//                 "deviator" , "stresses" , "DevStress"   ...
//               ] ;

// Notes: 
// (a): choose among "whole" and "deviator". If you are not interested in any 
//      eigen-element leave commented the above lines (you will save time)

// (b): if this variable is not found in your fem output file or if this variable
//      does not correspond to a symmetric second ordre tensor (6 components) the
//      corresponding eigen-element calculation will simply be ignored.

// (c): use comma (,) for column delimiter and semicolon (;) for line delimiter.


///////////////////////////////////////////////////////////////////////////
//          Choice of the prefix/postfix of the input file               //
///////////////////////////////////////////////////////////////////////////

// If your input files always carry the same prefix or postfix you can set
// the "wildcard" variable below to avoid having to type this extension and
// let ptovtu add it for you.
// Simply give in this string variable the prefix (followed by *) or the
// postfix (preceded by *) or keep it empty when your files do not have
// particular extension:

 wildcard = " "
// wilcard = "p*"  // <-- my files start with  a "p"
// wildcard = "*.out" // <-- my files end with the extension ".out"

